---
AWSTemplateFormatVersion: '2010-09-09'

# Any code, applications, scripts, templates, proofs of concept,
# documentation and other items are provided for illustration purposes only.
#
# Copyright 2017 Amazon Web Services
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

Mappings:

  CidrMap:
    Vpc:
      Cidr: 10.60.0.0/16
    Public1:
      Cidr: 10.60.198.0/23
    Public2:
      Cidr: 10.60.196.0/23
    Private1:
      Cidr: 10.60.160.0/19
    Private2:
      Cidr: 10.60.128.0/19

Resources:

  Vpc:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !FindInMap [ CidrMap, Vpc, Cidr ]
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
      - Key: Name
        Value: !Ref "AWS::StackName"

  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref Vpc
      CidrBlock: !FindInMap [ CidrMap, Public1, Cidr ]
      AvailabilityZone: !Select [ 0, "Fn::GetAZs": !Ref "AWS::Region" ]
      Tags:
      - Key: Name
        Value: !Sub "${AWS::StackName}-public-subnet-1"

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref Vpc
      CidrBlock: !FindInMap [ CidrMap, Public2, Cidr ]
      AvailabilityZone: !Select [ 1, "Fn::GetAZs": !Ref "AWS::Region" ]
      Tags:
      - Key: Name
        Value: !Sub "${AWS::StackName}-public-subnet-2"

  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref Vpc
      CidrBlock: !FindInMap [ CidrMap, Private1, Cidr ]
      AvailabilityZone: !Select [ 0, "Fn::GetAZs": !Ref "AWS::Region" ]
      Tags:
      - Key: Name
        Value: !Sub "${AWS::StackName}-private-subnet-1"

  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref Vpc
      CidrBlock: !FindInMap [ CidrMap, Private2, Cidr ]
      AvailabilityZone: !Select [ 1, "Fn::GetAZs": !Ref "AWS::Region" ]
      Tags:
      - Key: Name
        Value: !Sub "${AWS::StackName}-private-subnet-2"

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
      - Key: Name
        Value: !Sub "${AWS::StackName}-igw"

  VpcGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref Vpc
      InternetGatewayId: !Ref InternetGateway

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref Vpc
      Tags:
      - Key: Name
        Value: !Sub "${AWS::StackName}-public-igw"

  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn: VpcGatewayAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PublicSubnetRouteTableAssociation1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet1
      RouteTableId: !Ref PublicRouteTable

  PublicSubnetRouteTableAssociation2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet2
      RouteTableId: !Ref PublicRouteTable

  NatGateway1:
    DependsOn: VpcGatewayAttachment
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NatEIP.AllocationId
      SubnetId: !Ref PublicSubnet1

  NatGateway1:
    DependsOn: VpcGatewayAttachment
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NatEip1.AllocationId
      SubnetId: !Ref PublicSubnet1

  NatGateway2:
    DependsOn: VpcGatewayAttachment
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NatEip2.AllocationId
      SubnetId: !Ref PublicSubnet2

  NatEip1:
    DependsOn: VpcGatewayAttachment
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc

  NatEip2:
    DependsOn: VpcGatewayAttachment
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc

  NatRouteTable1:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref Vpc
      Tags:
      - Key: Name
        Value: !Sub "${AWS::StackName}-private-nat-1"

  NatRouteTable2:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref Vpc
      Tags:
      - Key: Name
        Value: !Sub "${AWS::StackName}-private-nat-2"

  NatRoute1:
    Type: AWS::EC2::Route
    DependsOn: VpcGatewayAttachment
    Properties:
      RouteTableId: !Ref NatRouteTable1
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway1

  NatRoute2:
    Type: AWS::EC2::Route
    DependsOn: VpcGatewayAttachment
    Properties:
      RouteTableId: !Ref NatRouteTable2
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway2

  PrivateSubnetRouteTableAssociation1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet1
      RouteTableId: !Ref NatRouteTable1

  PrivateSubnetRouteTableAssociation2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet2
      RouteTableId: !Ref NatRouteTable2

Outputs:

  VpcId:
    Description: Vpc Id
    Value: !Ref Vpc
    Export:
      Name: !Sub "${AWS::StackName}-vpc-id"

  PublicSubnet1:
    Description: Public subnet 1 id
    Value: !Ref PublicSubnet1
    Export:
      Name: !Sub "${AWS::StackName}-public-subnet-1-id"

  PublicSubnet2:
    Description: Public subnet 2 id
    Value: !Ref PublicSubnet2
    Export:
      Name: !Sub "${AWS::StackName}-public-subnet-2-id"

  PrivateSubnet1:
    Description: Private subnet 1 id
    Value: !Ref PrivateSubnet1
    Export:
      Name: !Sub "${AWS::StackName}-private-subnet-1-id"

  PrivateSubnet2:
    Description: Private subnet 2 id
    Value: !Ref PrivateSubnet2
    Export:
      Name: !Sub "${AWS::StackName}-private-subnet-2-id"


